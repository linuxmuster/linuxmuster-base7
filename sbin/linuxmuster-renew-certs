#!/usr/bin/env python3
#
# renew self-signed server certs
# thomas@linuxmuster.net
# 20250331
#

import datetime
import environment
import getopt
import os
import shutil
import sys

from functions import checkFwMajorVer, getFwConfig, getSetupValue, replaceInFile, printScript, putFwConfig, readTextfile, sshExec, subProc, tee


def usage():
    print('Usage: linuxmuster-renew-certs [options]')
    print(' [options] may be:')
    print(' -d <#>, --days=<#> : Set number of days (default: 7305).')
    print(' -f,     --force    : Skip security prompt.')
    print(' -n,     --dry-run  : Test only if the firewall certs can be renewed.')
    print(' -r,     --reboot   : Reboot server and firewall finally.')
    print(' -h,     --help     : print this help')


# get cli args
try:
    opts, args = getopt.getopt(sys.argv[1:], "d:fhnr", ["days=", "dry-run", "force", "help", "reboot"])
except getopt.GetoptError as err:
    # print help information and exit:
    print(err)  # will print something like "option -a not recognized"
    usage()
    sys.exit(2)


# default values
dry = False
force = False
reboot = False
logfile = environment.LOGDIR + '/linuxmuster-renew-certs.log'
now = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
days = 7305
ssldir = environment.SSLDIR
cacert = environment.CACERT
cacertb64 = environment.CACERTB64
cakey = environment.CAKEY
srvcert = ssldir + '/server.cert.pem'
srvkey = ssldir + '/server.key.pem'
fwcert = ssldir + '/firewall.cert.pem'
fwcertb64 = fwcert + '.b64'
fwkey = ssldir + '/firewall.key.pem'
fwkeyb64 = fwkey + '.b64'
b64_list = [cacertb64, fwcertb64, fwkeyb64]
fwconftmp = environment.FWCONFLOCAL
fwconfbak = fwconftmp.replace('.xml', '-' + now + '.xml')


# open logfile
try:
    l = open(logfile, 'a')
    orig_out = sys.stdout
    sys.stdout = tee(sys.stdout, l)
    sys.stderr = tee(sys.stderr, l)
except Exception as err:
    printScript('Cannot open logfile ' + logfile + ' !')
    printScript(err)
    sys.exit()


# start message
printScript(os.path.basename(__file__), 'begin')


# evaluate options
for o, a in opts:
    if o in ("-d", "--days"):
        days = a
    elif o in ("-f", "--force"):
        force = True
    elif o in ("-n", "--dry-run"):
        dry = True
    elif o in ("-r", "--reboot"):
        reboot = True
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    else:
        assert False, "unhandled option"


# security prompt
if not force and not dry:
    msg = 'Attention! Please confirm the renewing of the server certificates.'
    printScript(msg)
    answer = input("Answer \"YES\" to proceed: ")
    if answer != "YES":
        sys.exit(1)


# get setup values
msg = 'Reading setup data.'
printScript(msg)
try:
    firewallip = getSetupValue('firewallip')
    skipfw_str = getSetupValue('skipfw')
    if skipfw_str == 'False':
        skipfw = False
    else:
        skipfw = True
except Exception as err:
    printScript(msg + ' errors detected!')
    print(err)
    sys.exit(1)


# test current firewall certs

# download config
if skipfw:
    if dry:
        printScript('Dry run makes only sense with standard opnsense firewall.')
    else:
        printScript('Skipping firewall.')
else:
    if not checkFwMajorVer():
        sys.exit(1)
    # get fw current config
    try:
        getFwConfig(firewallip)
        shutil.copyfile(fwconftmp, fwconfbak)
    except Exception as err:
        printScript('Failed!')
        print(err)
        sys.exit(1)

# test if certs match
    try:
        msg = 'Testing if current firewall certs can be renewed:'
        printScript(msg)
        for item in b64_list:
            rc, b64_test = readTextfile(item)
            with open(fwconftmp) as fwconf:
                item_name = os.path.basename(item).replace('.pem.b64', '').replace('.', ' ')
                if b64_test in fwconf.read():
                    printScript('* ' + item_name + ' matches.')
                else:
                    printScript('* ' + item_name + ' does not match!')
                    sys.exit(1)
    except Exception as err:
        printScript('Failed!')
        print(err)
        sys.exit(1)


# dry run
if dry:
    if not skipfw:
        printScript('Dry run executed successfully.')
    printScript(os.path.basename(__file__), 'end')
    sys.exit(0)


# renew certs
try:
    msg = 'Renewing certificates for another ' + str(days) + ' days.'
    printScript(msg)
    for item in b64_list:
        item_old = item + '_old'
        shutil.copyfile(item, item_old)
    subProc('python3 ' + environment.SETUPDIR + '/g_ssl.py ' + str(days), logfile)
except Exception as err:
    printScript('Failed!')
    print(err)
    sys.exit(1)


# process firewall certs

if not skipfw:

# patch
    try:
        for item in b64_list:
            item_old = item + '_old'
            item_name = os.path.basename(item).replace('.pem.b64', '').replace('.', ' ')
            rc, cert_old = readTextfile(item_old)
            rc, cert_new = readTextfile(item)
            msg = 'Patching firewall config with ' + item_name + '.'
            printScript(msg)
            replaceInFile(fwconftmp, cert_old, cert_new)
    except Exception as err:
        printScript('Failed!')
        print(err)
        sys.exit(1)

# upload
    try:
        putFwConfig(firewallip)
    except Exception as err:
        printScript('Failed!')
        print(err)
        sys.exit(1)


# remove old files
for item in b64_list:
    item_old = item + '_old'
    try:
        os.unlink(item_old)
    except:
        continue


# reboot if requested
if reboot:
    if not skipfw:
        sshExec(firewallip, '/sbin/reboot')
    subProc('/sbin/reboot', logfile)


# end message
printScript(os.path.basename(__file__), 'end')
